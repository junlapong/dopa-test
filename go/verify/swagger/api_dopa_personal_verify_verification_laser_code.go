
/*
 * กรมการปกครอง / ตรวจสอบข้อมูลโดยใช้ข้อมูลบนบัตรฯ และเลขหลังบัตร
 *
 * หน่วยงานสามารถยืนยันตัวบุคคลโดยใช้ข้อมูลจากบัตรประชาชน และเลขหลังบัตร ผ่าน Government API ที่ สรอ. จัดเตรียมไว้ให้ ดังนี้
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type DopaPersonalVerifyVerificationLaserCodeApiService service

/*
DopaPersonalVerifyVerificationLaserCodeApiService การเรียกตรวจสอบข้อมูลบุคคลว่าตรงกับที่มีอยู่ในฐานข้อมูลทะเบียนราษฎร์หรือไม่
การเรียกตรวจสอบข้อมูลบุคคลของบุคคลนั้น ๆ ว่าตรงกับที่มีอยู่ใน ฐานข้อมูลทะเบียนราษฎร์ กรมการปกครอง หรือไม่ โดยใช้เลขหลังบัตรประชาชน (Laser Code)
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param consumerKey ชุดรหัสที่ สรอ. ออกให้ เพื่อความปลอดภัยในการเรียกใช้งาน API
 * @param token TOKEN ที่ได้รับกลับมาจาก สรอ. ในการ Validate API (https://app.swaggerhub.com/apis/dga/Validate/1.0)
 * @param citizenID หมายเลขบัตรประจำตัวประชาชน 13 หลัก
 * @param firstName ชื่อจริง (ภาษาไทย)
 * @param lastName นามสกุล (ภาษาไทย)
 * @param bEBirthDate วัน/เดือน/ปีเกิด (พ.ศ.)  โดยมีรูปแบบเป็น YYYYMMDD
 * @param laserCode หมายเลขหลังบัตรประจำตัวประชาชน
 * @param optional nil or *DopaPersonalVerifyVerificationLaserCodeApiPersonalGetOpts - Optional Parameters:
     * @param "ContentType" (optional.String) - 

@return Verify
*/

type DopaPersonalVerifyVerificationLaserCodeApiPersonalGetOpts struct { 
	ContentType optional.String
}

func (a *DopaPersonalVerifyVerificationLaserCodeApiService) PersonalGet(ctx context.Context, consumerKey string, token string, citizenID string, firstName string, lastName string, bEBirthDate string, laserCode string, localVarOptionals *DopaPersonalVerifyVerificationLaserCodeApiPersonalGetOpts) (Verify, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue Verify
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/personal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("CitizenID", parameterToString(citizenID, ""))
	localVarQueryParams.Add("FirstName", parameterToString(firstName, ""))
	localVarQueryParams.Add("LastName", parameterToString(lastName, ""))
	localVarQueryParams.Add("BEBirthDate", parameterToString(bEBirthDate, ""))
	localVarQueryParams.Add("LaserCode", parameterToString(laserCode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["Consumer-Key"] = parameterToString(consumerKey, "")
	localVarHeaderParams["Token"] = parameterToString(token, "")
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarHeaderParams["Content-Type"] = parameterToString(localVarOptionals.ContentType.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v Verify
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v DopaError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

